/*
===========================================================================

Doom 3 BFG Edition GPL Source Code
Copyright (C) 1993-2012 id Software LLC, a ZeniMax Media company. 

This file is part of the Doom 3 BFG Edition GPL Source Code ("Doom 3 BFG Edition Source Code").  

Doom 3 BFG Edition Source Code is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Doom 3 BFG Edition Source Code is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Doom 3 BFG Edition Source Code.  If not, see <http://www.gnu.org/licenses/>.

In addition, the Doom 3 BFG Edition Source Code is also subject to certain additional terms. You should have received a copy of these additional terms immediately following the terms and conditions of the GNU General Public License which accompanied the Doom 3 BFG Edition Source Code.  If not, please request a copy in writing from id Software at the address below.

If you have questions concerning this license or the applicable additional terms, you may contact in writing id Software LLC, c/o ZeniMax Media Inc., Suite 120, Rockville, Maryland 20850 USA.

===========================================================================
*/

#include "global.inc"

uniform sampler2D	samp0 : register(s0); // texture 0 is _scratch (mirror render)
uniform sampler2D	samp1 : register(s1); // texture 1 is the per-surface bump map
uniform sampler2D	samp2 : register(s2); // texture 2 is the mask texture

struct PS_IN {
	float4 position		: VPOS;
	float4 texcoord0	: TEXCOORD0_centroid;
	float4 texcoord1	: TEXCOORD1_centroid;
	float4 texcoord2	: TEXCOORD2_centroid;
	float4 texcoord3	: TEXCOORD3_centroid;
	float4 texcoord4	: TEXCOORD4_centroid;
	float4 texcoord5	: TEXCOORD5_centroid;
};

struct PS_OUT {
	float4 color : COLOR;
};

const float2 poisson[16] = float2[16](
	float2( -0.94201624, -0.39906216 ),  
	float2(  0.94558609, -0.76890725 ),
	float2( -0.09418410, -0.92938870 ), 
	float2(  0.34495938,  0.29387760 ),
	float2( -0.91588581,  0.45771432 ), 
	float2( -0.81544232, -0.87912464 ),
	float2( -0.38277543,  0.27676845 ), 
	float2(  0.97484398,  0.75648379 ),
	float2(  0.44323325, -0.97511554 ), 
	float2(  0.53742981, -0.47373420 ),
	float2( -0.26496911, -0.41893023 ), 
	float2(  0.79197514,  0.19090188 ),
	float2( -0.24188840,  0.99706507 ), 
	float2( -0.81409955,  0.91437590 ),
	float2(  0.19974126,  0.78641367 ),
	float2(  0.14383161, -0.14100790 )
); 

void main( PS_IN fragment, out PS_OUT result ) {
	// load the mask texture
	float4 mask = tex2D( samp2, fragment.texcoord0.xy );

	// load the filtered normal map and convert to -1 to 1 range
	float4 bumpMap = tex2D( samp1, fragment.texcoord0.xy ) * 2.0f - 1.0f;	
	
	float3 viewNormal;
	viewNormal.x = dot3( bumpMap.wyz, fragment.texcoord3 );
	viewNormal.y = dot3( bumpMap.wyz, fragment.texcoord4 );
	viewNormal.z = dot3( bumpMap.wyz, fragment.texcoord5 );
	
	viewNormal.xy *= mask.xy;

	float2 scale = min( fragment.texcoord1.xy / fragment.texcoord1.zz, float2( 0.05, 0.01 ) );
	
	// calculate the screen texcoord in the 0.0 to 1.0 range
	float2 mins = float2( rpWindowCoord.xy * 4 );
	float2 maxs = float2( 1 - rpWindowCoord.xy * 4 );
	float2 screenTexCoord = vposToScreenPosTexCoord( fragment.position.xy );
	screenTexCoord += ( viewNormal.xy * scale.xx );
	screenTexCoord = max( min( screenTexCoord, maxs ), mins );
	float4 color = tex2D( samp0, screenTexCoord );
	
	for ( int i = 0; i < 16; i++ ) {
		float2 uv = screenTexCoord + poisson[ i ].xy * scale.yy;
		color += tex2D( samp0, max( min( uv, maxs ), mins ) );
	}
	color = color / 17;
	
	float3 tint = dot( color.xyz, float3( 0.212671f, 0.715160f, 0.072169f ) ) * fragment.texcoord2.xyz;
	color.xyz = lerp( color.xyz, tint.xyz, fragment.texcoord2.w );
	
	result.color = color;
}