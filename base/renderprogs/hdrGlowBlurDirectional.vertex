/*
===========================================================================

Doom 3 BFG Edition GPL Source Code
Copyright (C) 1993-2012 id Software LLC, a ZeniMax Media company. 

This file is part of the Doom 3 BFG Edition GPL Source Code ("Doom 3 BFG Edition Source Code").  

Doom 3 BFG Edition Source Code is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Doom 3 BFG Edition Source Code is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Doom 3 BFG Edition Source Code.  If not, see <http://www.gnu.org/licenses/>.

In addition, the Doom 3 BFG Edition Source Code is also subject to certain additional terms. You should have received a copy of these additional terms immediately following the terms and conditions of the GNU General Public License which accompanied the Doom 3 BFG Edition Source Code.  If not, please request a copy in writing from id Software at the address below.

If you have questions concerning this license or the applicable additional terms, you may contact in writing id Software LLC, c/o ZeniMax Media Inc., Suite 120, Rockville, Maryland 20850 USA.

===========================================================================
*/

// foresthale 2014-04-21: directional blur (based on hdrGlowDownscale.vertex)

#include "global.inc"

struct VS_IN {
	float4 position : POSITION;
	float2 texcoord : TEXCOORD0;
	float4 normal : NORMAL;
	float4 tangent : TANGENT;
	float4 color : COLOR0;
};

struct VS_OUT {
	float4 position : POSITION;
	float4 texcoord0 : TEXCOORD0;
	float4 texcoord1 : TEXCOORD1;
	float4 texcoord2 : TEXCOORD2;
	float4 texcoord3 : TEXCOORD3;
	float4 texcoord4 : TEXCOORD4;
	float4 texcoord5 : TEXCOORD5;
	float4 texcoord6 : TEXCOORD6;
	float4 texcoord7 : TEXCOORD7;
};

void main( VS_IN vertex, out VS_OUT result ) {
	result.position = vertex.position;

	// foresthale: pack the positions we'll be fetching into texcoords
	// rpDiffuseModifier.xy is the positive direction, rpDiffuseModifier.zw is
	// the negative direction, the same pixel stepping works for both, so we
	// do it all as float4 math, we could calculate these in the pixel shader
	// but interpolants generally have better texture fetch latency
	float2 tCoords = vertex.texcoord * rpScreenCorrectionFactor.xy + rpScreenCorrectionFactor.zw;
	float4 tCoords4 = tCoords.xyxy;
	result.texcoord0 = tCoords4 + rpDiffuseModifier * 1.0;
	result.texcoord1 = tCoords4 + rpDiffuseModifier * 2.5;
	result.texcoord2 = tCoords4 + rpDiffuseModifier * 4.5;
	result.texcoord3 = tCoords4 + rpDiffuseModifier * 6.5;
	result.texcoord4 = tCoords4 + rpDiffuseModifier * 8.5;
	result.texcoord5 = tCoords4 + rpDiffuseModifier * 10.5;
	result.texcoord6 = tCoords4 + rpDiffuseModifier * 12.5;
	result.texcoord7 = tCoords4 + rpDiffuseModifier * 14.5;
}