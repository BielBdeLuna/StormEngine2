/*
===========================================================================

Doom 3 BFG Edition GPL Source Code
Copyright (C) 1993-2012 id Software LLC, a ZeniMax Media company. 

This file is part of the Doom 3 BFG Edition GPL Source Code ("Doom 3 BFG Edition Source Code").  

Doom 3 BFG Edition Source Code is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Doom 3 BFG Edition Source Code is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Doom 3 BFG Edition Source Code.  If not, see <http://www.gnu.org/licenses/>.

In addition, the Doom 3 BFG Edition Source Code is also subject to certain additional terms. You should have received a copy of these additional terms immediately following the terms and conditions of the GNU General Public License which accompanied the Doom 3 BFG Edition Source Code.  If not, please request a copy in writing from id Software at the address below.

If you have questions concerning this license or the applicable additional terms, you may contact in writing id Software LLC, c/o ZeniMax Media Inc., Suite 120, Rockville, Maryland 20850 USA.

===========================================================================
*/

// foresthale 2014-04-08: HDR blit to screen with dithering and glow (based on hdrDither.pixel)

#include "global.inc"

uniform sampler2D samp0		: register(s0);
uniform sampler2D samp1		: register(s1);
uniform sampler2D samp2		: register(s2);

struct PS_IN {
	float4 position : VPOS;
	float4 texcoord0 : TEXCOORD0_centroid;
};

struct PS_OUT {
	float4 color : COLOR;
};

void main( PS_IN fragment, out PS_OUT result ) {
	float2 tCoords = fragment.texcoord0.xy;
	float2 tCoordsGlow = fragment.texcoord0.zw;
	float3 glow = tex2D( samp2, tCoordsGlow ).xyz * rpDiffuseModifier.x;
	result.color = tex2D( samp0, tCoords ) + float4(glow, 0.0) + tex2D( samp1, gl_FragCoord.xy * vec2(0.25, 0.25)) * float4(1.0 / 128.0, 1.0 / 128.0, 1.0 / 128.0, 0.0);
}
