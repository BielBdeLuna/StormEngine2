/*
===========================================================================

Doom 3 BFG Edition GPL Source Code
Copyright (C) 1993-2012 id Software LLC, a ZeniMax Media company. 

This file is part of the Doom 3 BFG Edition GPL Source Code ("Doom 3 BFG Edition Source Code").  

Doom 3 BFG Edition Source Code is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Doom 3 BFG Edition Source Code is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Doom 3 BFG Edition Source Code.  If not, see <http://www.gnu.org/licenses/>.

In addition, the Doom 3 BFG Edition Source Code is also subject to certain additional terms. You should have received a copy of these additional terms immediately following the terms and conditions of the GNU General Public License which accompanied the Doom 3 BFG Edition Source Code.  If not, please request a copy in writing from id Software at the address below.

If you have questions concerning this license or the applicable additional terms, you may contact in writing id Software LLC, c/o ZeniMax Media Inc., Suite 120, Rockville, Maryland 20850 USA.

===========================================================================
*/

// foresthale 2014-04-21: directional blur (based on hdrGlowDownscale.pixel)

#include "global.inc"

uniform sampler2D samp0		: register(s0);

struct PS_IN {
	float4 position : VPOS;
	float4 texcoord0 : TEXCOORD0_centroid;
	float4 texcoord1 : TEXCOORD1_centroid;
	float4 texcoord2 : TEXCOORD2_centroid;
	float4 texcoord3 : TEXCOORD3_centroid;
	float4 texcoord4 : TEXCOORD4_centroid;
	float4 texcoord5 : TEXCOORD5_centroid;
	float4 texcoord6 : TEXCOORD6_centroid;
	float4 texcoord7 : TEXCOORD7_centroid;
};

struct PS_OUT {
	float4 color : COLOR;
};

void main( PS_IN fragment, out PS_OUT result ) {
	float4 tCoords0 = fragment.texcoord0;
	float4 tCoords1 = fragment.texcoord1;
	float4 tCoords2 = fragment.texcoord2;
	float4 tCoords3 = fragment.texcoord3;
	float4 tCoords4 = fragment.texcoord4;
	float4 tCoords5 = fragment.texcoord5;
	float4 tCoords6 = fragment.texcoord6;
	float4 tCoords7 = fragment.texcoord7;                                                                    
	result.color = ((tex2D( samp0, tCoords0.xy ) + tex2D( samp0, tCoords0.zw )) * 1.6                         
	             +  (tex2D( samp0, tCoords1.xy ) + tex2D( samp0, tCoords1.zw )) * 1.1
	             +  (tex2D( samp0, tCoords2.xy ) + tex2D( samp0, tCoords2.zw )) * 0.8
	             +  (tex2D( samp0, tCoords3.xy ) + tex2D( samp0, tCoords3.zw )) * 0.6
	             +  (tex2D( samp0, tCoords4.xy ) + tex2D( samp0, tCoords4.zw )) * 0.5
	             +  (tex2D( samp0, tCoords5.xy ) + tex2D( samp0, tCoords5.zw )) * 0.3
	             +  (tex2D( samp0, tCoords6.xy ) + tex2D( samp0, tCoords6.zw )) * 0.2
	             +  (tex2D( samp0, tCoords7.xy ) + tex2D( samp0, tCoords7.zw )) * 0.1) * 0.17857;
}
